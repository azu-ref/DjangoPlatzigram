Al correr el comando 'django-admin startproject *nombre del projecto*' generamos un folder con lo necesario para inicar un proyecto de django
al final del proyecto podemos especificar la ruta donde queremos que se cree el proyecto.

El folder contendra una carprta con el nombre del proyecto y un archivo manage.py

en la carpeta del proyecto tendremos 4 archivos: 
        -__ini__.py: Se encarga de declar elproyecto como un modulo de python
        -sttings.py: Es el archivo mas importante de django, y es donde dfinimos la configuracion de nuestro proyecto
        -urls.py: Es el punto de entrada para todoas las peticiones que reciba el servidor de Django
        -wsgi.py: Es el archivo usado durante el deploy para produccion y Es la WSGI con nustro proyecto de django 
        cuando esta en produccion
        
        -manage.py: es un archivo que nunc avamos a tocar, perointrectuaremos con el durante todo el desarrollo

        
A demas en el archivo settings podemos encontrar comentarios y links a la documentacion de django agregados por defecto,
la linea mas importante de ese archivo es: BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) 
la cual declara la direccion donde esta corriendo el proyecto.
La varibale debug debe permanecer en true mientras el proyecto esta en desarrollo, esto debe cambiar cuando el proyecto sea enviado a produccion
En el archivo settings estan definidas por defecto las aplicaciones y midlewares que usa django desde para conectarse a la base de datos hasta la
autenticacion y validacion de usuarios

-------------------------------------------------------------------------------------------------------------------------------------------

para especificar una ruta lo hacemos en el archivo de urls:

necesitamos la clase HttpResponse la cual importamos de django.http, con estos ya podemos enviar respuestas por nuestras urls

Definimos la urls en la lista ulrpatterns, con la funcion path(), donde el primer argumento es el nombre con el cual accederemos y elsegundo la funcion
que recibe o deuelve la peticion

-------------------------------------------------------------------------------------------------------------

Podemos enviar parametro a las rutas diractamente como si fuera una query y tomarla con el metodo GET del request, y acceder a la variable, para parsear esos Datos a JSON tenemos dos formas, con JsonResponse que directamente responde con un json si le pasamos un diccionario como argumento,

o con el HttpResponse y el modulo de json, que contiene el metodo dumps, que convierte un diccionario a json,
como segundo parametro de la respuesta pasamos el argumento del tipo de aplicaion en este caso 'application/json'

---------------------------------------------------------------------------------------------------------

Tambien podemos definir argumentos en las rutas de nustra aplicacon con el tipo y de la variable y el nombre:
'ruta/<type:name' podemos definir tantos como queramos

----------------------------------------------------------------------------------------------------

para crear una aplicacion (que es una parte de nuestro proyecto final) utilizamos el comando:
'python manage.py startapp name-app'

Esto creara un nuevo folder con el nombrede la aplicacion creada

----------------------------------------------------------------------------------------------

Para trabajar nuestros templates en django creamos una carpeta templates dentro de nuestra aplicacion,
en el archivo views, importamos el metodo render, lo retornamos en la funcion de la ruto y le pasamos como parametro el nombre de nuestro templete, debido a que  django tiene previamente definido en settings como trabajar y buscar los templetes, esta implementacion es muy sencilla.

A la funcion render se le deben pasar 3 parametros, el objeto request, el nombre del template, y si existe una variable en un diccionaris. esta variable puede ser accedida desde el template html

------------------------------------------------------------------------------------------------------

Migraciones 

para realizar una migracion deirectamente de una clase definida, primero debemos ejecutar el comando makemigrations, el cual creaa un archivo de migracion en base a lo que definimos en la clase, depues ejecutamos el comando migrate, y llevamos la clase a la base de datos en forma de tabla

ANtes de correr migrate ajuro debemos correr makemigrations, ya que el primer comando depende de los archivos de migraciones

-------------------------------------------------------------------------------------------------

En el archivo admin.py de cada app podemos definir como esta app se comportara con la pantaya de administracion, si queremos visualizar los datos y tenemos ciertas variables que django utiliza para hacernos mas facil el camino, podemos extender un modelo como el user que trae por defecto y con un modelo de perfil y mostrar estos datos en la pantalla
